Linked list subsystem documentation
===================================

Gurbalib has a subsystem for dealing with doubly
linked lists of objects. The lists use a sentinel
for quickly finding the head and tail.

The subsystem can be used to create new lists and 
remove them, to insert objects at a random location 
in the list, to append them to the end or prepend them 
in front of the head of a list.

Objects that are destructed are removed from any lists
they are in, and those lists are relinked properly.

1. Storage

  Linked lists are stored in a special mapping in
  /kernel/lib/auto.c

  Direct access to entries in this mapping is 
  possible for code residing in /kernel. All code
  outside /kernel must use the list api to access
  any data related to linked lists.

2. Data model

  Each object has a mapping with list names as keys
  and arrays with 3 object references each as values.

  the mapping looks like:

  ([ "list name" : ({ previous_member, next_member, sentinel }) ])

3. API

  For objects outside /kernel, an api will be provided for accessing
  those lists.

  list_new( string list )           Create a new named linked list and
                                    use this_object() as sentinel for the
                                    list.

  list_del( string list )           Destroy the named list, can only be
                                    used by the list sentinel

  list_insert( string list,         Insert this_object() into the named 
               object ob)           list in front of object ob

  list_append( string list,         Append this_object after the tail of
               object ob)           the named list. ob must be a member
                                    of the list, or the sentinel for the
                                    list.

  list_prepend( string list,        Prepend in front of the head of the
                object ob)          named list, ob must be a member of that
                                    list or the sentinel for it.

  list_remove( string list )        Remove this_object from the named list

  list_next( string list )          returns the next member of the named list

  list_prev( string list )          returns the previous member of the 
                                    named list

4. Protected lists

  The following list name(s) are protected and cannot be used by code
  outside /kernel:

    clones      : used for keeping track of clones of an object.


